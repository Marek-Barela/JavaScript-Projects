!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=37)}([function(e,t){e.exports=function(e){return e&&"Widget"===e.type}},function(e,t){e.exports="2"},function(e,t,n){var r=n(1);e.exports=function(e){return e&&"VirtualNode"===e.type&&e.version===r}},function(e,t,n){var r=n(19),o=n(22),i=n(28),u=n(8),a=n(16),s=n(17);e.exports={diff:r,patch:o,h:i,create:u,VNode:a,VText:s}},function(e,t,n){var r=n(1);e.exports=function(e){return e&&"VirtualText"===e.type&&e.version===r}},function(e,t){e.exports=function(e){return e&&"Thunk"===e.type}},function(e,t){e.exports=function(e){return e&&("function"==typeof e.hook&&!e.hasOwnProperty("hook")||"function"==typeof e.unhook&&!e.hasOwnProperty("unhook"))}},function(e,t){var n=Array.isArray,r=Object.prototype.toString;e.exports=n||function(e){return"[object Array]"===r.call(e)}},function(e,t,n){var r=n(14);e.exports=r},function(e,t,n){var r=n(1);function o(e,t,n){this.type=Number(e),this.vNode=t,this.patch=n}o.NONE=0,o.VTEXT=1,o.VNODE=2,o.WIDGET=3,o.PROPS=4,o.ORDER=5,o.INSERT=6,o.REMOVE=7,o.THUNK=8,e.exports=o,o.prototype.version=r,o.prototype.type="VirtualPatch"},function(e,t,n){var r=n(2),o=n(4),i=n(0),u=n(5);function a(e,t){var n=e.vnode;if(n||(n=e.vnode=e.render(t)),!(r(n)||o(n)||i(n)))throw new Error("thunk did not return a valid node");return n}e.exports=function(e,t){var n=e,r=t;u(t)&&(r=a(t,e));u(e)&&(n=a(e,null));return{a:n,b:r}}},function(e,t,n){"use strict";e.exports=function(e){return"object"==typeof e&&null!==e}},function(e,t,n){(function(t){var r,o=void 0!==t?t:"undefined"!=typeof window?window:{},i=n(24);"undefined"!=typeof document?r=document:(r=o["__GLOBAL_DOCUMENT_CACHE@4"])||(r=o["__GLOBAL_DOCUMENT_CACHE@4"]=i),e.exports=r}).call(this,n(13))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(12),o=n(15),i=n(2),u=n(4),a=n(0),s=n(10);e.exports=function e(t,n){var c=n&&n.document||r;var f=n?n.warn:null;t=s(t).a;if(a(t))return t.init();if(u(t))return c.createTextNode(t.text);if(!i(t))return f&&f("Item is not a valid virtual dom node",t),null;var l=null===t.namespace?c.createElement(t.tagName):c.createElementNS(t.namespace,t.tagName);var p=t.properties;o(l,p);var h=t.children;for(var v=0;v<h.length;v++){var d=e(h[v],n);d&&l.appendChild(d)}return l}},function(e,t,n){var r=n(11),o=n(6);function i(e,t,n,r){if(r){var i=r[t];if(o(i))i.unhook&&i.unhook(e,t,n);else if("attributes"===t)for(var u in i)e.removeAttribute(u);else if("style"===t)for(var a in i)e.style[a]="";else e[t]="string"==typeof i?"":null}}function u(e,t,n,o,i){var u=n?n[o]:void 0;if("attributes"!==o)if(u&&r(u)&&a(u)!==a(i))e[o]=i;else{r(e[o])||(e[o]={});var s="style"===o?"":void 0;for(var c in i){var f=i[c];e[o][c]=void 0===f?s:f}}else for(var l in i){var p=i[l];void 0===p?e.removeAttribute(l):e.setAttribute(l,p)}}function a(e){return Object.getPrototypeOf?Object.getPrototypeOf(e):e.__proto__?e.__proto__:e.constructor?e.constructor.prototype:void 0}e.exports=function(e,t,n){for(var a in t){var s=t[a];void 0===s?i(e,a,s,n):o(s)?(i(e,a,s,n),s.hook&&s.hook(e,a,n?n[a]:void 0)):r(s)?u(e,t,n,a,s):e[a]=s}}},function(e,t,n){var r=n(1),o=n(2),i=n(0),u=n(5),a=n(6);e.exports=f;var s={},c=[];function f(e,t,n,r,f){this.tagName=e,this.properties=t||s,this.children=n||c,this.key=null!=r?String(r):void 0,this.namespace="string"==typeof f?f:null;var l,p=n&&n.length||0,h=0,v=!1,d=!1,y=!1;for(var g in t)if(t.hasOwnProperty(g)){var m=t[g];a(m)&&m.unhook&&(l||(l={}),l[g]=m)}for(var b=0;b<p;b++){var x=n[b];o(x)?(h+=x.count||0,!v&&x.hasWidgets&&(v=!0),!d&&x.hasThunks&&(d=!0),y||!x.hooks&&!x.descendantHooks||(y=!0)):!v&&i(x)?"function"==typeof x.destroy&&(v=!0):!d&&u(x)&&(d=!0)}this.count=p+h,this.hasWidgets=v,this.hasThunks=d,this.hooks=l,this.descendantHooks=y}f.prototype.version=r,f.prototype.type="VirtualNode"},function(e,t,n){var r=n(1);function o(e){this.text=String(e)}e.exports=o,o.prototype.version=r,o.prototype.type="VirtualText"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){return e[0]===t},o=function(e){return function(e){return"string"==typeof e&&e.length>0}(e)&&(r(e,".")||r(e,"#"))},i=["a","abbr","acronym","address","applet","area","article","aside","audio","b","base","basefont","bdi","bdo","bgsound","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","command","content","data","datalist","dd","del","details","dfn","dialog","dir","div","dl","dt","element","em","embed","fieldset","figcaption","figure","font","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","image","img","input","ins","isindex","kbd","keygen","label","legend","li","link","listing","main","map","mark","marquee","math","menu","menuitem","meta","meter","multicol","nav","nextid","nobr","noembed","noframes","noscript","object","ol","optgroup","option","output","p","param","picture","plaintext","pre","progress","q","rb","rbc","rp","rt","rtc","ruby","s","samp","script","section","select","shadow","slot","small","source","spacer","span","strike","strong","style","sub","summary","sup","svg","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","tt","u","ul","var","video","wbr","xmp"];t.default=function(e){var t=function(e){return function(t){return function(n){for(var r=arguments.length,i=Array(r>1?r-1:0),u=1;u<r;u++)i[u-1]=arguments[u];return o(n)?e.apply(void 0,[t+n].concat(i)):void 0===n?e(t):e.apply(void 0,[t,n].concat(i))}}}(e),n={TAG_NAMES:i,isSelector:o,createTag:t};return i.forEach(function(e){n[e]=t(e)}),n},e.exports=t.default},function(e,t,n){var r=n(20);e.exports=r},function(e,t,n){var r=n(7),o=n(9),i=n(2),u=n(4),a=n(0),s=n(5),c=n(10),f=n(21);function l(e,t){var n={a:e};return p(e,t,n,0),n}function p(e,t,n,r){if(e!==t){var c=n[r],l=!1;if(s(e)||s(t))v(e,t,n,r);else if(null==t)a(e)||(h(e,n,r),c=n[r]),c=g(c,new o(o.REMOVE,e,t));else if(i(t))if(i(e))if(e.tagName===t.tagName&&e.namespace===t.namespace&&e.key===t.key){var m=f(e.properties,t.properties);m&&(c=g(c,new o(o.PROPS,e,m))),c=function(e,t,n,r,u){for(var a=e.children,s=function(e,t){var n=y(t),r=n.keys,o=n.free;if(o.length===t.length)return{children:t,moves:null};var i=y(e),u=i.keys;if(i.free.length===e.length)return{children:t,moves:null};for(var a=[],s=0,c=o.length,f=0,l=0;l<e.length;l++){var p,h=e[l];h.key?r.hasOwnProperty(h.key)?(p=r[h.key],a.push(t[p])):(p=l-f++,a.push(null)):s<c?(p=o[s++],a.push(t[p])):(p=l-f++,a.push(null))}for(var v=s>=o.length?t.length:o[s],g=0;g<t.length;g++){var m=t[g];m.key?u.hasOwnProperty(m.key)||a.push(m):g>=v&&a.push(m)}for(var b,x=a.slice(),k=0,O=[],w=[],E=0;E<t.length;){var N=t[E];for(b=x[k];null===b&&x.length;)O.push(d(x,k,null)),b=x[k];b&&b.key===N.key?(k++,E++):N.key?(b&&b.key&&r[b.key]!==E+1?(O.push(d(x,k,b.key)),(b=x[k])&&b.key===N.key?k++:w.push({key:N.key,to:E})):w.push({key:N.key,to:E}),E++):b&&b.key&&O.push(d(x,k,b.key))}for(;k<x.length;)b=x[k],O.push(d(x,k,b&&b.key));if(O.length===f&&!w.length)return{children:a,moves:null};return{children:a,moves:{removes:O,inserts:w}}}(a,t.children),c=s.children,f=a.length,l=c.length,h=f>l?f:l,v=0;v<h;v++){var m=a[v],b=c[v];u+=1,m?p(m,b,n,u):b&&(r=g(r,new o(o.INSERT,null,b))),i(m)&&m.count&&(u+=m.count)}s.moves&&(r=g(r,new o(o.ORDER,e,s.moves)));return r}(e,t,n,c,r)}else c=g(c,new o(o.VNODE,e,t)),l=!0;else c=g(c,new o(o.VNODE,e,t)),l=!0;else u(t)?u(e)?e.text!==t.text&&(c=g(c,new o(o.VTEXT,e,t))):(c=g(c,new o(o.VTEXT,e,t)),l=!0):a(t)&&(a(e)||(l=!0),c=g(c,new o(o.WIDGET,e,t)));c&&(n[r]=c),l&&h(e,n,r)}}function h(e,t,n){!function e(t,n,r){if(i(t)){if(t.hooks&&(n[r]=g(n[r],new o(o.PROPS,t,function(e){var t={};for(var n in e)t[n]=void 0;return t}(t.hooks)))),t.descendantHooks||t.hasThunks)for(var u=t.children,a=u.length,c=0;c<a;c++){var f=u[c];e(f,n,r+=1),i(f)&&f.count&&(r+=f.count)}}else s(t)&&v(t,null,n,r)}(e,t,n),function e(t,n,r){if(a(t))"function"==typeof t.destroy&&(n[r]=g(n[r],new o(o.REMOVE,t,null)));else if(i(t)&&(t.hasWidgets||t.hasThunks))for(var u=t.children,c=u.length,f=0;f<c;f++){var l=u[f];e(l,n,r+=1),i(l)&&l.count&&(r+=l.count)}else s(t)&&v(t,null,n,r)}(e,t,n)}function v(e,t,n,r){var i=c(e,t),u=l(i.a,i.b);(function(e){for(var t in e)if("a"!==t)return!0;return!1})(u)&&(n[r]=new o(o.THUNK,null,u))}function d(e,t,n){return e.splice(t,1),{from:t,key:n}}function y(e){for(var t={},n=[],r=e.length,o=0;o<r;o++){var i=e[o];i.key?t[i.key]=o:n.push(o)}return{keys:t,free:n}}function g(e,t){return e?(r(e)?e.push(t):e=[e,t],e):t}e.exports=l},function(e,t,n){var r=n(11),o=n(6);function i(e){return Object.getPrototypeOf?Object.getPrototypeOf(e):e.__proto__?e.__proto__:e.constructor?e.constructor.prototype:void 0}e.exports=function e(t,n){var u;for(var a in t){a in n||((u=u||{})[a]=void 0);var s=t[a],c=n[a];if(s!==c)if(r(s)&&r(c))if(i(c)!==i(s))(u=u||{})[a]=c;else if(o(c))(u=u||{})[a]=c;else{var f=e(s,c);f&&((u=u||{})[a]=f)}else(u=u||{})[a]=c}for(var l in n)l in t||((u=u||{})[l]=n[l]);return u}},function(e,t,n){var r=n(23);e.exports=r},function(e,t,n){var r=n(12),o=n(7),i=n(14),u=n(25),a=n(26);function s(e,t,n){var o=function(e){var t=[];for(var n in e)"a"!==n&&t.push(Number(n));return t}(t);if(0===o.length)return e;var i=u(e,t.a,o),a=e.ownerDocument;n.document||a===r||(n.document=a);for(var s=0;s<o.length;s++){var f=o[s];e=c(e,i[f],t[f],n)}return e}function c(e,t,n,r){if(!t)return e;var i;if(o(n))for(var u=0;u<n.length;u++)i=a(n[u],t,r),t===e&&(e=i);else i=a(n,t,r),t===e&&(e=i);return e}e.exports=function e(t,n,r){r=r||{};r.patch=r.patch&&r.patch!==e?r.patch:s;r.render=r.render||i;return r.patch(t,n,r)}},function(e,t){},function(e,t){var n={};function r(e,t,n){if(0===e.length)return!1;for(var r,o,i=0,u=e.length-1;i<=u;){if(o=e[r=(u+i)/2>>0],i===u)return o>=t&&o<=n;if(o<t)i=r+1;else{if(!(o>n))return!0;u=r-1}}return!1}function o(e,t){return e>t?1:-1}e.exports=function(e,t,i,u){return i&&0!==i.length?(i.sort(o),function e(t,o,i,u,a){u=u||{};if(t){r(i,a,a)&&(u[a]=t);var s=o.children;if(s)for(var c=t.childNodes,f=0;f<o.children.length;f++){a+=1;var l=s[f]||n,p=a+(l.count||0);r(i,a,p)&&e(c[f],l,i,u,a),a=p}}return u}(e,t,i,u,0)):{}}},function(e,t,n){var r=n(15),o=n(0),i=n(9),u=n(27);function a(e,t){"function"==typeof t.destroy&&o(t)&&t.destroy(e)}e.exports=function(e,t,n){var o=e.type,s=e.vNode,c=e.patch;switch(o){case i.REMOVE:return function(e,t){var n=e.parentNode;n&&n.removeChild(e);return a(e,t),null}(t,s);case i.INSERT:return function(e,t,n){var r=n.render(t,n);e&&e.appendChild(r);return e}(t,c,n);case i.VTEXT:return function(e,t,n,r){var o;if(3===e.nodeType)e.replaceData(0,e.length,n.text),o=e;else{var i=e.parentNode;o=r.render(n,r),i&&o!==e&&i.replaceChild(o,e)}return o}(t,0,c,n);case i.WIDGET:return function(e,t,n,r){var o,i=u(t,n);o=i?n.update(t,e)||e:r.render(n,r);var s=e.parentNode;s&&o!==e&&s.replaceChild(o,e);i||a(e,t);return o}(t,s,c,n);case i.VNODE:return function(e,t,n,r){var o=e.parentNode,i=r.render(n,r);o&&i!==e&&o.replaceChild(i,e);return i}(t,0,c,n);case i.ORDER:return function(e,t){for(var n,r,o,i=e.childNodes,u={},a=0;a<t.removes.length;a++)r=t.removes[a],n=i[r.from],r.key&&(u[r.key]=n),e.removeChild(n);for(var s=i.length,c=0;c<t.inserts.length;c++)o=t.inserts[c],n=u[o.key],e.insertBefore(n,o.to>=s++?null:i[o.to])}(t,c),t;case i.PROPS:return r(t,c,s.properties),t;case i.THUNK:return function(e,t){e&&t&&e!==t&&e.parentNode&&e.parentNode.replaceChild(t,e);return t}(t,n.patch(t,c,n));default:return t}}},function(e,t,n){var r=n(0);e.exports=function(e,t){if(r(e)&&r(t))return"name"in e&&"name"in t?e.id===t.id:e.init===t.init;return!1}},function(e,t,n){var r=n(29);e.exports=r},function(e,t,n){"use strict";var r=n(7),o=n(16),i=n(17),u=n(2),a=n(4),s=n(0),c=n(6),f=n(5),l=n(30),p=n(32),h=n(33);function v(e){return u(e)||a(e)||s(e)||f(e)}function d(e){try{return JSON.stringify(e,null,"    ")}catch(t){return String(e)}}e.exports=function(e,t,n){var u,a,s,f,y=[];!n&&(g=t,"string"==typeof g||r(g)||v(g))&&(n=t,a={});var g;u=l(e,a=a||t||{}),a.hasOwnProperty("key")&&(s=a.key,a.key=void 0);a.hasOwnProperty("namespace")&&(f=a.namespace,a.namespace=void 0);"INPUT"!==u||f||!a.hasOwnProperty("value")||void 0===a.value||c(a.value)||(a.value=p(a.value));(function(e){for(var t in e)if(e.hasOwnProperty(t)){var n=e[t];if(c(n))continue;"ev-"===t.substr(0,3)&&(e[t]=h(n))}})(a),null!=n&&function e(t,n,o,u){if("string"==typeof t)n.push(new i(t));else if("number"==typeof t)n.push(new i(String(t)));else if(v(t))n.push(t);else{if(!r(t)){if(null==t)return;throw s={foreignObject:t,parentVnode:{tagName:o,properties:u}},(c=new Error).type="virtual-hyperscript.unexpected.virtual-element",c.message="Unexpected virtual child passed to h().\nExpected a VNode / Vthunk / VWidget / string but:\ngot:\n"+d(s.foreignObject)+".\nThe parent vnode is:\n"+d(s.parentVnode),c.foreignObject=s.foreignObject,c.parentVnode=s.parentVnode,c}for(var a=0;a<t.length;a++)e(t[a],n,o,u)}var s,c}(n,y,u,a);return new o(u,a,y,s,f)}},function(e,t,n){"use strict";var r=n(31),o=/([\.#]?[a-zA-Z0-9\u007F-\uFFFF_:-]+)/,i=/^\.|#/;e.exports=function(e,t){if(!e)return"DIV";var n,u,a,s,c=!t.hasOwnProperty("id"),f=r(e,o),l=null;i.test(f[1])&&(l="DIV");for(s=0;s<f.length;s++)(u=f[s])&&(a=u.charAt(0),l?"."===a?(n=n||[]).push(u.substring(1,u.length)):"#"===a&&c&&(t.id=u.substring(1,u.length)):l=u);n&&(t.className&&n.push(t.className),t.className=n.join(" "));return t.namespace?l:l.toUpperCase()}},function(e,t){var n,r,o;
/*!
 * Cross-Browser Split 1.1.1
 * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>
 * Available under the MIT License
 * ECMAScript compliant, uniform cross-browser split method
 */
e.exports=(r=String.prototype.split,o=/()??/.exec("")[1]===n,function(e,t,i){if("[object RegExp]"!==Object.prototype.toString.call(t))return r.call(e,t,i);var u,a,s,c,f=[],l=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.extended?"x":"")+(t.sticky?"y":""),p=0;for(t=new RegExp(t.source,l+"g"),e+="",o||(u=new RegExp("^"+t.source+"$(?!\\s)",l)),i=i===n?-1>>>0:i>>>0;(a=t.exec(e))&&!((s=a.index+a[0].length)>p&&(f.push(e.slice(p,a.index)),!o&&a.length>1&&a[0].replace(u,function(){for(var e=1;e<arguments.length-2;e++)arguments[e]===n&&(a[e]=n)}),a.length>1&&a.index<e.length&&Array.prototype.push.apply(f,a.slice(1)),c=a[0].length,p=s,f.length>=i));)t.lastIndex===a.index&&t.lastIndex++;return p===e.length?!c&&t.test("")||f.push(""):f.push(e.slice(p)),f.length>i?f.slice(0,i):f})},function(e,t,n){"use strict";function r(e){if(!(this instanceof r))return new r(e);this.value=e}e.exports=r,r.prototype.hook=function(e,t){e[t]!==this.value&&(e[t]=this.value)}},function(e,t,n){"use strict";var r=n(34);function o(e){if(!(this instanceof o))return new o(e);this.value=e}e.exports=o,o.prototype.hook=function(e,t){r(e)[t.substr(3)]=this.value},o.prototype.unhook=function(e,t){r(e)[t.substr(3)]=void 0}},function(e,t,n){"use strict";n(35)("ev-store","7");var r="__EV_STORE_KEY@7";e.exports=function(e){var t=e[r];t||(t=e[r]={});return t}},function(e,t,n){"use strict";var r=n(36);e.exports=function(e,t,n){var o="__INDIVIDUAL_ONE_VERSION_"+e,i=r(o+"_ENFORCE_SINGLETON",t);if(i!==t)throw new Error("Can only have one copy of "+e+".\nYou already have version "+i+" installed.\nThis means you cannot install version "+t);return r(o,n)}},function(e,t,n){"use strict";(function(t){var n="undefined"!=typeof window?window:void 0!==t?t:{};e.exports=function(e,t){if(e in n)return n[e];return n[e]=t,t}}).call(this,n(13))},function(e,t,n){"use strict";n.r(t);var r={formInputValue:"",shoppingList:[]},o=n(18),i=n.n(o),u=n(3);const a="INPUT_UPDATE",s="ADD_ITEM",c="DELETE_ITEM",f={type:s};var l=(e,t)=>{switch(e.type){case a:const{formInputValue:n}=e;return{...t,formInputValue:n};case s:return(e=>{const{formInputValue:t}=e,n={id:Date.now(),value:t},r=[...e.shoppingList,n];return{...e,shoppingList:r,formInputValue:""}})(t);case c:const{id:r}=e,o=((e,t)=>t.shoppingList.filter(t=>e!==t.id))(r,t);return{...t,shoppingList:o};default:return{...t}}};const{h1:p,p:h,div:v,input:d,button:y,form:g,ul:m,li:b}=i()(u.h),x=(e,t)=>t.map(t=>v([b(t.value),y({onclick:()=>{e((e=>({type:c,id:e}))(t.id))}},"x")]));var k=(e,t)=>v([p("Shopping App"),v([g({onsubmit:t=>{t.preventDefault(),e(f)}},[d({value:t.formInputValue,oninput:t=>{e((e=>({type:a,formInputValue:e}))(t.target.value))}}),y({type:"submit"},"Add")])]),function(e,t){return t.shoppingList.length?m([x(e,t.shoppingList)]):h("List is empty...")}(e,t)]),O=n(8),w=n.n(O);((e,t,n,r)=>{let o=e,i=n(function e(r){o=t(r,o);const s=n(e,o),c=Object(u.diff)(i,s);a=Object(u.patch)(a,c),i=s},o),a=w()(i);r.appendChild(a)})(r,l,k,document.getElementById("app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,