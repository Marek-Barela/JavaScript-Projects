!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=37)}([function(e,t){e.exports=function(e){return e&&"Widget"===e.type}},function(e,t){e.exports="2"},function(e,t,n){var r=n(1);e.exports=function(e){return e&&"VirtualNode"===e.type&&e.version===r}},function(e,t,n){var r=n(19),o=n(22),a=n(28),i=n(8),s=n(16),u=n(17);e.exports={diff:r,patch:o,h:a,create:i,VNode:s,VText:u}},function(e,t,n){var r=n(1);e.exports=function(e){return e&&"VirtualText"===e.type&&e.version===r}},function(e,t){e.exports=function(e){return e&&"Thunk"===e.type}},function(e,t){e.exports=function(e){return e&&("function"==typeof e.hook&&!e.hasOwnProperty("hook")||"function"==typeof e.unhook&&!e.hasOwnProperty("unhook"))}},function(e,t){var n=Array.isArray,r=Object.prototype.toString;e.exports=n||function(e){return"[object Array]"===r.call(e)}},function(e,t,n){var r=n(14);e.exports=r},function(e,t,n){var r=n(1);function o(e,t,n){this.type=Number(e),this.vNode=t,this.patch=n}o.NONE=0,o.VTEXT=1,o.VNODE=2,o.WIDGET=3,o.PROPS=4,o.ORDER=5,o.INSERT=6,o.REMOVE=7,o.THUNK=8,e.exports=o,o.prototype.version=r,o.prototype.type="VirtualPatch"},function(e,t,n){var r=n(2),o=n(4),a=n(0),i=n(5);function s(e,t){var n=e.vnode;if(n||(n=e.vnode=e.render(t)),!(r(n)||o(n)||a(n)))throw new Error("thunk did not return a valid node");return n}e.exports=function(e,t){var n=e,r=t;i(t)&&(r=s(t,e));i(e)&&(n=s(e,null));return{a:n,b:r}}},function(e,t,n){"use strict";e.exports=function(e){return"object"==typeof e&&null!==e}},function(e,t,n){(function(t){var r,o=void 0!==t?t:"undefined"!=typeof window?window:{},a=n(24);"undefined"!=typeof document?r=document:(r=o["__GLOBAL_DOCUMENT_CACHE@4"])||(r=o["__GLOBAL_DOCUMENT_CACHE@4"]=a),e.exports=r}).call(this,n(13))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(12),o=n(15),a=n(2),i=n(4),s=n(0),u=n(10);e.exports=function e(t,n){var c=n&&n.document||r;var l=n?n.warn:null;t=u(t).a;if(s(t))return t.init();if(i(t))return c.createTextNode(t.text);if(!a(t))return l&&l("Item is not a valid virtual dom node",t),null;var f=null===t.namespace?c.createElement(t.tagName):c.createElementNS(t.namespace,t.tagName);var p=t.properties;o(f,p);var d=t.children;for(var h=0;h<d.length;h++){var v=e(d[h],n);v&&f.appendChild(v)}return f}},function(e,t,n){var r=n(11),o=n(6);function a(e,t,n,r){if(r){var a=r[t];if(o(a))a.unhook&&a.unhook(e,t,n);else if("attributes"===t)for(var i in a)e.removeAttribute(i);else if("style"===t)for(var s in a)e.style[s]="";else e[t]="string"==typeof a?"":null}}function i(e,t,n,o,a){var i=n?n[o]:void 0;if("attributes"!==o)if(i&&r(i)&&s(i)!==s(a))e[o]=a;else{r(e[o])||(e[o]={});var u="style"===o?"":void 0;for(var c in a){var l=a[c];e[o][c]=void 0===l?u:l}}else for(var f in a){var p=a[f];void 0===p?e.removeAttribute(f):e.setAttribute(f,p)}}function s(e){return Object.getPrototypeOf?Object.getPrototypeOf(e):e.__proto__?e.__proto__:e.constructor?e.constructor.prototype:void 0}e.exports=function(e,t,n){for(var s in t){var u=t[s];void 0===u?a(e,s,u,n):o(u)?(a(e,s,u,n),u.hook&&u.hook(e,s,n?n[s]:void 0)):r(u)?i(e,t,n,s,u):e[s]=u}}},function(e,t,n){var r=n(1),o=n(2),a=n(0),i=n(5),s=n(6);e.exports=l;var u={},c=[];function l(e,t,n,r,l){this.tagName=e,this.properties=t||u,this.children=n||c,this.key=null!=r?String(r):void 0,this.namespace="string"==typeof l?l:null;var f,p=n&&n.length||0,d=0,h=!1,v=!1,y=!1;for(var g in t)if(t.hasOwnProperty(g)){var m=t[g];s(m)&&m.unhook&&(f||(f={}),f[g]=m)}for(var _=0;_<p;_++){var b=n[_];o(b)?(d+=b.count||0,!h&&b.hasWidgets&&(h=!0),!v&&b.hasThunks&&(v=!0),y||!b.hooks&&!b.descendantHooks||(y=!0)):!h&&a(b)?"function"==typeof b.destroy&&(h=!0):!v&&i(b)&&(v=!0)}this.count=p+d,this.hasWidgets=h,this.hasThunks=v,this.hooks=f,this.descendantHooks=y}l.prototype.version=r,l.prototype.type="VirtualNode"},function(e,t,n){var r=n(1);function o(e){this.text=String(e)}e.exports=o,o.prototype.version=r,o.prototype.type="VirtualText"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){return e[0]===t},o=function(e){return function(e){return"string"==typeof e&&e.length>0}(e)&&(r(e,".")||r(e,"#"))},a=["a","abbr","acronym","address","applet","area","article","aside","audio","b","base","basefont","bdi","bdo","bgsound","big","blink","blockquote","body","br","button","canvas","caption","center","cite","code","col","colgroup","command","content","data","datalist","dd","del","details","dfn","dialog","dir","div","dl","dt","element","em","embed","fieldset","figcaption","figure","font","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","image","img","input","ins","isindex","kbd","keygen","label","legend","li","link","listing","main","map","mark","marquee","math","menu","menuitem","meta","meter","multicol","nav","nextid","nobr","noembed","noframes","noscript","object","ol","optgroup","option","output","p","param","picture","plaintext","pre","progress","q","rb","rbc","rp","rt","rtc","ruby","s","samp","script","section","select","shadow","slot","small","source","spacer","span","strike","strong","style","sub","summary","sup","svg","table","tbody","td","template","textarea","tfoot","th","thead","time","title","tr","track","tt","u","ul","var","video","wbr","xmp"];t.default=function(e){var t=function(e){return function(t){return function(n){for(var r=arguments.length,a=Array(r>1?r-1:0),i=1;i<r;i++)a[i-1]=arguments[i];return o(n)?e.apply(void 0,[t+n].concat(a)):void 0===n?e(t):e.apply(void 0,[t,n].concat(a))}}}(e),n={TAG_NAMES:a,isSelector:o,createTag:t};return a.forEach(function(e){n[e]=t(e)}),n},e.exports=t.default},function(e,t,n){var r=n(20);e.exports=r},function(e,t,n){var r=n(7),o=n(9),a=n(2),i=n(4),s=n(0),u=n(5),c=n(10),l=n(21);function f(e,t){var n={a:e};return p(e,t,n,0),n}function p(e,t,n,r){if(e!==t){var c=n[r],f=!1;if(u(e)||u(t))h(e,t,n,r);else if(null==t)s(e)||(d(e,n,r),c=n[r]),c=g(c,new o(o.REMOVE,e,t));else if(a(t))if(a(e))if(e.tagName===t.tagName&&e.namespace===t.namespace&&e.key===t.key){var m=l(e.properties,t.properties);m&&(c=g(c,new o(o.PROPS,e,m))),c=function(e,t,n,r,i){for(var s=e.children,u=function(e,t){var n=y(t),r=n.keys,o=n.free;if(o.length===t.length)return{children:t,moves:null};var a=y(e),i=a.keys;if(a.free.length===e.length)return{children:t,moves:null};for(var s=[],u=0,c=o.length,l=0,f=0;f<e.length;f++){var p,d=e[f];d.key?r.hasOwnProperty(d.key)?(p=r[d.key],s.push(t[p])):(p=f-l++,s.push(null)):u<c?(p=o[u++],s.push(t[p])):(p=f-l++,s.push(null))}for(var h=u>=o.length?t.length:o[u],g=0;g<t.length;g++){var m=t[g];m.key?i.hasOwnProperty(m.key)||s.push(m):g>=h&&s.push(m)}for(var _,b=s.slice(),w=0,x=[],k=[],N=0;N<t.length;){var O=t[N];for(_=b[w];null===_&&b.length;)x.push(v(b,w,null)),_=b[w];_&&_.key===O.key?(w++,N++):O.key?(_&&_.key&&r[_.key]!==N+1?(x.push(v(b,w,_.key)),(_=b[w])&&_.key===O.key?w++:k.push({key:O.key,to:N})):k.push({key:O.key,to:N}),N++):_&&_.key&&x.push(v(b,w,_.key))}for(;w<b.length;)_=b[w],x.push(v(b,w,_&&_.key));if(x.length===l&&!k.length)return{children:s,moves:null};return{children:s,moves:{removes:x,inserts:k}}}(s,t.children),c=u.children,l=s.length,f=c.length,d=l>f?l:f,h=0;h<d;h++){var m=s[h],_=c[h];i+=1,m?p(m,_,n,i):_&&(r=g(r,new o(o.INSERT,null,_))),a(m)&&m.count&&(i+=m.count)}u.moves&&(r=g(r,new o(o.ORDER,e,u.moves)));return r}(e,t,n,c,r)}else c=g(c,new o(o.VNODE,e,t)),f=!0;else c=g(c,new o(o.VNODE,e,t)),f=!0;else i(t)?i(e)?e.text!==t.text&&(c=g(c,new o(o.VTEXT,e,t))):(c=g(c,new o(o.VTEXT,e,t)),f=!0):s(t)&&(s(e)||(f=!0),c=g(c,new o(o.WIDGET,e,t)));c&&(n[r]=c),f&&d(e,n,r)}}function d(e,t,n){!function e(t,n,r){if(a(t)){if(t.hooks&&(n[r]=g(n[r],new o(o.PROPS,t,function(e){var t={};for(var n in e)t[n]=void 0;return t}(t.hooks)))),t.descendantHooks||t.hasThunks)for(var i=t.children,s=i.length,c=0;c<s;c++){var l=i[c];e(l,n,r+=1),a(l)&&l.count&&(r+=l.count)}}else u(t)&&h(t,null,n,r)}(e,t,n),function e(t,n,r){if(s(t))"function"==typeof t.destroy&&(n[r]=g(n[r],new o(o.REMOVE,t,null)));else if(a(t)&&(t.hasWidgets||t.hasThunks))for(var i=t.children,c=i.length,l=0;l<c;l++){var f=i[l];e(f,n,r+=1),a(f)&&f.count&&(r+=f.count)}else u(t)&&h(t,null,n,r)}(e,t,n)}function h(e,t,n,r){var a=c(e,t),i=f(a.a,a.b);(function(e){for(var t in e)if("a"!==t)return!0;return!1})(i)&&(n[r]=new o(o.THUNK,null,i))}function v(e,t,n){return e.splice(t,1),{from:t,key:n}}function y(e){for(var t={},n=[],r=e.length,o=0;o<r;o++){var a=e[o];a.key?t[a.key]=o:n.push(o)}return{keys:t,free:n}}function g(e,t){return e?(r(e)?e.push(t):e=[e,t],e):t}e.exports=f},function(e,t,n){var r=n(11),o=n(6);function a(e){return Object.getPrototypeOf?Object.getPrototypeOf(e):e.__proto__?e.__proto__:e.constructor?e.constructor.prototype:void 0}e.exports=function e(t,n){var i;for(var s in t){s in n||((i=i||{})[s]=void 0);var u=t[s],c=n[s];if(u!==c)if(r(u)&&r(c))if(a(c)!==a(u))(i=i||{})[s]=c;else if(o(c))(i=i||{})[s]=c;else{var l=e(u,c);l&&((i=i||{})[s]=l)}else(i=i||{})[s]=c}for(var f in n)f in t||((i=i||{})[f]=n[f]);return i}},function(e,t,n){var r=n(23);e.exports=r},function(e,t,n){var r=n(12),o=n(7),a=n(14),i=n(25),s=n(26);function u(e,t,n){var o=function(e){var t=[];for(var n in e)"a"!==n&&t.push(Number(n));return t}(t);if(0===o.length)return e;var a=i(e,t.a,o),s=e.ownerDocument;n.document||s===r||(n.document=s);for(var u=0;u<o.length;u++){var l=o[u];e=c(e,a[l],t[l],n)}return e}function c(e,t,n,r){if(!t)return e;var a;if(o(n))for(var i=0;i<n.length;i++)a=s(n[i],t,r),t===e&&(e=a);else a=s(n,t,r),t===e&&(e=a);return e}e.exports=function e(t,n,r){r=r||{};r.patch=r.patch&&r.patch!==e?r.patch:u;r.render=r.render||a;return r.patch(t,n,r)}},function(e,t){},function(e,t){var n={};function r(e,t,n){if(0===e.length)return!1;for(var r,o,a=0,i=e.length-1;a<=i;){if(o=e[r=(i+a)/2>>0],a===i)return o>=t&&o<=n;if(o<t)a=r+1;else{if(!(o>n))return!0;i=r-1}}return!1}function o(e,t){return e>t?1:-1}e.exports=function(e,t,a,i){return a&&0!==a.length?(a.sort(o),function e(t,o,a,i,s){i=i||{};if(t){r(a,s,s)&&(i[s]=t);var u=o.children;if(u)for(var c=t.childNodes,l=0;l<o.children.length;l++){s+=1;var f=u[l]||n,p=s+(f.count||0);r(a,s,p)&&e(c[l],f,a,i,s),s=p}}return i}(e,t,a,i,0)):{}}},function(e,t,n){var r=n(15),o=n(0),a=n(9),i=n(27);function s(e,t){"function"==typeof t.destroy&&o(t)&&t.destroy(e)}e.exports=function(e,t,n){var o=e.type,u=e.vNode,c=e.patch;switch(o){case a.REMOVE:return function(e,t){var n=e.parentNode;n&&n.removeChild(e);return s(e,t),null}(t,u);case a.INSERT:return function(e,t,n){var r=n.render(t,n);e&&e.appendChild(r);return e}(t,c,n);case a.VTEXT:return function(e,t,n,r){var o;if(3===e.nodeType)e.replaceData(0,e.length,n.text),o=e;else{var a=e.parentNode;o=r.render(n,r),a&&o!==e&&a.replaceChild(o,e)}return o}(t,0,c,n);case a.WIDGET:return function(e,t,n,r){var o,a=i(t,n);o=a?n.update(t,e)||e:r.render(n,r);var u=e.parentNode;u&&o!==e&&u.replaceChild(o,e);a||s(e,t);return o}(t,u,c,n);case a.VNODE:return function(e,t,n,r){var o=e.parentNode,a=r.render(n,r);o&&a!==e&&o.replaceChild(a,e);return a}(t,0,c,n);case a.ORDER:return function(e,t){for(var n,r,o,a=e.childNodes,i={},s=0;s<t.removes.length;s++)r=t.removes[s],n=a[r.from],r.key&&(i[r.key]=n),e.removeChild(n);for(var u=a.length,c=0;c<t.inserts.length;c++)o=t.inserts[c],n=i[o.key],e.insertBefore(n,o.to>=u++?null:a[o.to])}(t,c),t;case a.PROPS:return r(t,c,u.properties),t;case a.THUNK:return function(e,t){e&&t&&e!==t&&e.parentNode&&e.parentNode.replaceChild(t,e);return t}(t,n.patch(t,c,n));default:return t}}},function(e,t,n){var r=n(0);e.exports=function(e,t){if(r(e)&&r(t))return"name"in e&&"name"in t?e.id===t.id:e.init===t.init;return!1}},function(e,t,n){var r=n(29);e.exports=r},function(e,t,n){"use strict";var r=n(7),o=n(16),a=n(17),i=n(2),s=n(4),u=n(0),c=n(6),l=n(5),f=n(30),p=n(32),d=n(33);function h(e){return i(e)||s(e)||u(e)||l(e)}function v(e){try{return JSON.stringify(e,null,"    ")}catch(t){return String(e)}}e.exports=function(e,t,n){var i,s,u,l,y=[];!n&&(g=t,"string"==typeof g||r(g)||h(g))&&(n=t,s={});var g;i=f(e,s=s||t||{}),s.hasOwnProperty("key")&&(u=s.key,s.key=void 0);s.hasOwnProperty("namespace")&&(l=s.namespace,s.namespace=void 0);"INPUT"!==i||l||!s.hasOwnProperty("value")||void 0===s.value||c(s.value)||(s.value=p(s.value));(function(e){for(var t in e)if(e.hasOwnProperty(t)){var n=e[t];if(c(n))continue;"ev-"===t.substr(0,3)&&(e[t]=d(n))}})(s),null!=n&&function e(t,n,o,i){if("string"==typeof t)n.push(new a(t));else if("number"==typeof t)n.push(new a(String(t)));else if(h(t))n.push(t);else{if(!r(t)){if(null==t)return;throw u={foreignObject:t,parentVnode:{tagName:o,properties:i}},(c=new Error).type="virtual-hyperscript.unexpected.virtual-element",c.message="Unexpected virtual child passed to h().\nExpected a VNode / Vthunk / VWidget / string but:\ngot:\n"+v(u.foreignObject)+".\nThe parent vnode is:\n"+v(u.parentVnode),c.foreignObject=u.foreignObject,c.parentVnode=u.parentVnode,c}for(var s=0;s<t.length;s++)e(t[s],n,o,i)}var u,c}(n,y,i,s);return new o(i,s,y,u,l)}},function(e,t,n){"use strict";var r=n(31),o=/([\.#]?[a-zA-Z0-9\u007F-\uFFFF_:-]+)/,a=/^\.|#/;e.exports=function(e,t){if(!e)return"DIV";var n,i,s,u,c=!t.hasOwnProperty("id"),l=r(e,o),f=null;a.test(l[1])&&(f="DIV");for(u=0;u<l.length;u++)(i=l[u])&&(s=i.charAt(0),f?"."===s?(n=n||[]).push(i.substring(1,i.length)):"#"===s&&c&&(t.id=i.substring(1,i.length)):f=i);n&&(t.className&&n.push(t.className),t.className=n.join(" "));return t.namespace?f:f.toUpperCase()}},function(e,t){var n,r,o;
/*!
 * Cross-Browser Split 1.1.1
 * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>
 * Available under the MIT License
 * ECMAScript compliant, uniform cross-browser split method
 */
e.exports=(r=String.prototype.split,o=/()??/.exec("")[1]===n,function(e,t,a){if("[object RegExp]"!==Object.prototype.toString.call(t))return r.call(e,t,a);var i,s,u,c,l=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.extended?"x":"")+(t.sticky?"y":""),p=0;for(t=new RegExp(t.source,f+"g"),e+="",o||(i=new RegExp("^"+t.source+"$(?!\\s)",f)),a=a===n?-1>>>0:a>>>0;(s=t.exec(e))&&!((u=s.index+s[0].length)>p&&(l.push(e.slice(p,s.index)),!o&&s.length>1&&s[0].replace(i,function(){for(var e=1;e<arguments.length-2;e++)arguments[e]===n&&(s[e]=n)}),s.length>1&&s.index<e.length&&Array.prototype.push.apply(l,s.slice(1)),c=s[0].length,p=u,l.length>=a));)t.lastIndex===s.index&&t.lastIndex++;return p===e.length?!c&&t.test("")||l.push(""):l.push(e.slice(p)),l.length>a?l.slice(0,a):l})},function(e,t,n){"use strict";function r(e){if(!(this instanceof r))return new r(e);this.value=e}e.exports=r,r.prototype.hook=function(e,t){e[t]!==this.value&&(e[t]=this.value)}},function(e,t,n){"use strict";var r=n(34);function o(e){if(!(this instanceof o))return new o(e);this.value=e}e.exports=o,o.prototype.hook=function(e,t){r(e)[t.substr(3)]=this.value},o.prototype.unhook=function(e,t){r(e)[t.substr(3)]=void 0}},function(e,t,n){"use strict";n(35)("ev-store","7");var r="__EV_STORE_KEY@7";e.exports=function(e){var t=e[r];t||(t=e[r]={});return t}},function(e,t,n){"use strict";var r=n(36);e.exports=function(e,t,n){var o="__INDIVIDUAL_ONE_VERSION_"+e,a=r(o+"_ENFORCE_SINGLETON",t);if(a!==t)throw new Error("Can only have one copy of "+e+".\nYou already have version "+a+" installed.\nThis means you cannot install version "+t);return r(o,n)}},function(e,t,n){"use strict";(function(t){var n="undefined"!=typeof window?window:void 0!==t?t:{};e.exports=function(e,t){if(e in n)return n[e];return n[e]=t,t}}).call(this,n(13))},function(e,t,n){"use strict";n.r(t);var r={flashcards:[]},o=n(3),a=n(8),i=n.n(a);var s=(e,t,n,r)=>{let a=e,s=t(function e(r){a=n(r,a);const i=t(e,a),c=Object(o.diff)(s,i);u=Object(o.patch)(u,c),s=i},a),u=i()(s);r.appendChild(u)};const u="CREATE_FLASHCARD",c="SAVE_FLASHCARD",l="EDIT_QUESTION",f="EDIT_ANSWER",p="DELETE_FLASHCARD",d="SHOW_ANSWER",h=(e,t)=>({type:c,editMode:e,id:t}),v=e=>({type:p,id:e}),y=(e,t)=>e.filter(e=>e.id===t);var g=(e,t)=>{switch(e.type){case c:{const{editMode:n,id:r}=e;return((e,t,n)=>{const{flashcards:r}=e;return y(r,n).map(e=>[e.editMode=t,e.showAnswer=!1]),{...e}})(t,n,r)}case l:{const{question:n,id:r}=e;return((e,t,n)=>{const{flashcards:r}=e;return y(r,n).map(e=>e.question=t),{...e}})(t,n,r)}case f:{const{answer:n,id:r}=e;return((e,t,n)=>{const{flashcards:r}=e;return y(r,n).map(e=>e.answer=t),{...e}})(t,n,r)}case u:{const e={id:Date.now(),editMode:!0,question:"",answer:"",showAnswer:!1},n=[...t.flashcards,e];return{...t,flashcards:n}}case p:{const{flashcards:n}=t,{id:r}=e,o=n.filter(e=>e.id!==r);return{...t,flashcards:o}}case d:{const{showAnswer:n,id:r}=e;return((e,t,n)=>{const{flashcards:r}=e;return y(r,n).map(e=>e.showAnswer=t),{...e}})(t,n,r)}default:return{...t}}},m=n(18),_=n.n(m);const{h1:b,p:w,button:x,div:k,form:N,textarea:O,span:E}=_()(o.h),T=(e,t)=>!0===t.showAnswer?k([w({className:"flashcard__paragraph"},"Answer :"),w({className:"flashcard__paragraph flashcard__paragraph--size"},`${t.answer}`)]):w({onclick:()=>{e(((e,t)=>({type:d,showAnswer:e,id:t}))(!0,t.id))},className:"flashcard__paragraph flashcard__paragraph--underscore"},"Show answer"),S=(e,t)=>{const{flashcards:n}=t;return n.map(t=>!0===t.editMode?k({className:"flashcard"},[N({onsubmit:n=>{n.preventDefault(),e(h(!1,t.id))}},[E({className:"flashcard__close-button",onclick:()=>{e(v(t.id))}},"x"),w({className:"flashcard__paragraph"},"Question :"),O({className:"flashcard__textarea",rows:"4",cols:"15",value:t.question,oninput:n=>{e(((e,t)=>({type:l,question:e,id:t}))(n.target.value,t.id))}}),w({className:"flashcard__paragraph"},"Answer :"),O({className:"flashcard__textarea",rows:"4",cols:"15",value:t.answer,oninput:n=>{e(((e,t)=>({type:f,answer:e,id:t}))(n.target.value,t.id))}}),x({className:"flashcard__button",type:"submit"},"Save")])]):k({className:"flashcard"},[E({className:"flashcard__close-button",onclick:()=>{e(v(t.id))}},"x"),w({className:"flashcard__paragraph"},"Qestions :"),w({className:"flashcard__paragraph flashcard__paragraph--size flashcard--edit",onclick:()=>{e(h(!0,t.id))}},`${t.question}`),T(e,t)]))};s(r,(e,t)=>k({className:"app__container"},[b({className:"app__header"},"Flashcard Study"),x({className:"add-card__button",onclick:()=>{e((()=>({type:u}))())}},"+ Add Flashcard"),k({className:"flashcard__container"},[S(e,t)])]),g,document.getElementById("app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,